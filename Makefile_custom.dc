TARGET_EXEC ?= nuquake.elf

BUILD_DIR ?= ./build_dc
EXEC_DIR ?= $(BUILD_DIR)
SRC_DIRS ?= ./src
ROOT_DIR := .
DEP_DIR := $(ROOT_DIR)/deps

FILTER_PLATFORMS = ./src/win32/% ./src/linux/% ./src/null/% ./src/common/unused/% ./src/client/unused/% ./src/dreamcast/unused/% 

SRCS := $(filter-out $(FILTER_PLATFORMS), $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c -or -name *.s -or -name *.rc))
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)
DEPS := $(OBJS:.o=.d)

INC_DIRS := $(filter-out $(FILTER_PLATFORMS), $(shell find $(SRC_DIRS) -type d))
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

KOS_CFLAGS = -fomit-frame-pointer -ml -m4-single-only -I/opt/toolchains/dc/kos/include -I/opt/toolchains/dc/kos/kernel/arch/dreamcast/include -I/opt/toolchains/dc/kos/addons/include -I/opt/toolchains/dc/kos/../kos-ports/include -D_arch_dreamcast -D_arch_sub_pristine
GCC_WILD_FLAGS = 
# -fstack-usage -Wstack-usage=512
BASE_CFLAGS =  -Wall -Wextra -Wformat=0 -Wno-missing-field-initializers -Wdouble-promotion -fsingle-precision-constant -Xlinker -Map=output.map -DGLQUAKE -DBUILD_LIBGL -std=gnu11
RELEASE_CFLAGS = $(BASE_CFLAGS) -O2 -ffast-math 
FINAL_CFLAGS = $(RELEASE_CFLAGS) -O3 -DQUIET -funsafe-math-optimizations -ffast-math -mpretend-cmove -mdiv=inv -mfused-madd -maccumulate-outgoing-args -ffp-contract=fast
DEBUG_CFLAGS = $(BASE_CFLAGS) -O0 -g

GCCVERSIONGTEQ5 := $(shell expr `sh-elf-gcc -dumpversion | cut -f1 -d.` \>= 5)
GCC5_FLAGS = 

ifeq "$(GCCVERSIONGTEQ5)" "1"
	GCC5_FLAGS += -mfsca -mfsrra -mlra -matomic-model=none
	GCC_WILD_FLAGS = -mdiv=inv -maccumulate-outgoing-args
endif

CFLAGS = $(FINAL_CFLAGS) $(GCC5_FLAGS) $(GCC_WILD_FLAGS) -Ideps/libgl/include -Ideps/minilzo -Ideps/cglm/include -Ideps/aldc/include

# Very Important, if this doesnt match your enviroment, you NEED to change
PREFIX = sh-elf-

CC = $(PREFIX)gcc
LD = $(CC)
LDFLAGS :=

STRIP = $(PREFIX)strip

LIB_GLDC = $(DEP_DIR)/libgl/libGLdc.a 
LIB_LZO = $(DEP_DIR)/minilzo/libminilzo.a
LIBS = $(LIB_GLDC)  -lz $(DEP_DIR)/aldc/libAL.a 
INCS = -iquote src/common -iquote src/dreamcast

CPPFLAGS ?= $(INC_FLAGS) -MMD -MP

$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS) $(LIB_GLDC)
	@echo  $@
	@$(CC) $(INCS) $(KOS_CFLAGS) $(CFLAGS) $(LDFLAGS) $(KOS_LDFLAGS) -o $@  $(KOS_START) $(OBJS) -L$(KOS_BASE)/lib $(LIBS) -lm $(KOS_LIBS)
	@$(KOS_CC_BASE)/sh-elf/bin/objcopy -R .stack -O binary $@ $(basename $@)
	@$(KOS_BASE)/utils/scramble/scramble $(basename $@) $(BUILD_DIR)/1ST_READ.BIN
	@-$(CP_N) assets/* $(EXEC_DIR)/

$(BUILD_DIR)/%.s.o: %.s
	@$(MKDIR_P) $(dir $@)
	@$(AS) $(ASFLAGS) -c $< -o $@

$(BUILD_DIR)/%.c.o: %.c
	@echo  "> $@"
	@$(MKDIR_P) $(dir $@)
	@$(CC) $(CPPFLAGS) $(KOS_CFLAGS) $(CFLAGS) $(INCS)  $(LDFLAGS) -c $< -o $@

$(BUILD_DIR)/%.cpp.o: %.cpp
	@echo  $@
	@$(MKDIR_P) $(dir $@)
	@$(CXX) $(CPPFLAGS) $(KOS_CFLAGS) $(CXXFLAGS) $(INCS) $(LDFLAGS) -c $< -o $@

#GLdc :
#	@$(MAKE) -C deps/libgl CFLAGS=-DBUILD_LIBGL build

$(LIB_GLDC):
	$(MAKE) -C deps/libgl

$(LIB_LZO) :
	$(MAKE) -C deps/minilzo

.PHONY: clean

clean:
	$(RM) -r $(BUILD_DIR)/src

MKDIR_P ?= mkdir -p
CP_N ?= cp -n
